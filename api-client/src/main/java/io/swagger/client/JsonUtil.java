/**
 * conex.io REST-Like API
 * The conex.io API provides the functionality to interact with home automation devices, which are connected to a home automation server, detached from the manufacturer specific communication syntax.
 *
 * OpenAPI spec version: 0.9.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Device".equalsIgnoreCase(className)) {
      return new TypeToken<List<Device>>(){}.getType();
    }
    
    if ("Devices".equalsIgnoreCase(className)) {
      return new TypeToken<List<Devices>>(){}.getType();
    }
    
    if ("Dimmer".equalsIgnoreCase(className)) {
      return new TypeToken<List<Dimmer>>(){}.getType();
    }
    
    if ("Filter".equalsIgnoreCase(className)) {
      return new TypeToken<List<Filter>>(){}.getType();
    }
    
    if ("Function".equalsIgnoreCase(className)) {
      return new TypeToken<List<Function>>(){}.getType();
    }
    
    if ("Ids".equalsIgnoreCase(className)) {
      return new TypeToken<List<Ids>>(){}.getType();
    }
    
    if ("OnOff".equalsIgnoreCase(className)) {
      return new TypeToken<List<OnOff>>(){}.getType();
    }
    
    if ("Patcher".equalsIgnoreCase(className)) {
      return new TypeToken<List<Patcher>>(){}.getType();
    }
    
    if ("Temperature".equalsIgnoreCase(className)) {
      return new TypeToken<List<Temperature>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Device".equalsIgnoreCase(className)) {
      return new TypeToken<Device>(){}.getType();
    }
    
    if ("Devices".equalsIgnoreCase(className)) {
      return new TypeToken<Devices>(){}.getType();
    }
    
    if ("Dimmer".equalsIgnoreCase(className)) {
      return new TypeToken<Dimmer>(){}.getType();
    }
    
    if ("Filter".equalsIgnoreCase(className)) {
      return new TypeToken<Filter>(){}.getType();
    }
    
    if ("Function".equalsIgnoreCase(className)) {
      return new TypeToken<Function>(){}.getType();
    }
    
    if ("Ids".equalsIgnoreCase(className)) {
      return new TypeToken<Ids>(){}.getType();
    }
    
    if ("OnOff".equalsIgnoreCase(className)) {
      return new TypeToken<OnOff>(){}.getType();
    }
    
    if ("Patcher".equalsIgnoreCase(className)) {
      return new TypeToken<Patcher>(){}.getType();
    }
    
    if ("Temperature".equalsIgnoreCase(className)) {
      return new TypeToken<Temperature>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
