/**
 * conex.io REST-Like API
 * The conex.io API provides the functionality to interact with home automation devices, which are connected to a home automation server, detached from the manufacturer specific communication syntax.
 *
 * OpenAPI spec version: 0.9.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;

import io.swagger.client.model.Dimmer;
import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Generic color dimmer using the hsv color model
 **/
@ApiModel(description = "Generic color dimmer using the hsv color model")
public class ColorDimmer extends Dimmer {
    /*
    @SerializedName("function_id")
    private String functionId = null;
    @SerializedName("value")
    private Integer value = null;*/
  @SerializedName("hue")
  private Integer hue = null;
  @SerializedName("saturation")
  private Integer saturation = null;

  /**
   * Color value in degrees
   * minimum: 0
   * maximum: 359
   **/
  @ApiModelProperty(value = "Color value in degrees")
  public Integer getHue() {
    return hue;
  }
  public void setHue(Integer hue) {
    this.hue = hue;
  }

  /**
   * Saturation of color
   * minimum: 0
   * maximum: 255
   **/
  @ApiModelProperty(value = "Saturation of color")
  public Integer getSaturation() {
    return saturation;
  }
  public void setSaturation(Integer saturation) {
    this.saturation = saturation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColorDimmer colorDimmer = (ColorDimmer) o;
    return (this.getFunctionId() == null ? colorDimmer.getFunctionId() == null : this.getFunctionId().equals(colorDimmer.getFunctionId())) &&
        (super.getValue() == null ? colorDimmer.getValue() == null : super.getValue().equals(colorDimmer.getValue())) &&
        (this.getTimestamp() == null ? colorDimmer.getTimestamp() == null : this.getTimestamp().equals(colorDimmer.getTimestamp())) &&
        (this.hue == null ? colorDimmer.hue == null : this.hue.equals(colorDimmer.hue)) &&
        (this.saturation == null ? colorDimmer.saturation == null : this.saturation.equals(colorDimmer.saturation));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.getFunctionId() == null ? 0: this.getFunctionId().hashCode());
    result = 31 * result + (this.getValue() == null ? 0: this.getValue().hashCode());
    result = 31 * result + (this.getTimestamp() == null ? 0: this.getTimestamp().hashCode());
    result = 31 * result + (this.hue == null ? 0: this.hue.hashCode());
    result = 31 * result + (this.saturation == null ? 0: this.saturation.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColorDimmer {\n");
    sb.append("  " + super.toString()).append("\n");
    sb.append("  functionId: ").append(this.getFunctionId()).append("\n");
    sb.append("  hue: ").append(hue).append("\n");
    sb.append("  saturation: ").append(saturation).append("\n");
      sb.append("  ").append(super.toString()).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
